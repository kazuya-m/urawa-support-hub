name: Deploy Cloud Scheduler

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/scheduler/**'
      - '.github/workflows/deploy-scheduler.yml'
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
  SCHEDULER_SA_EMAIL: ${{ secrets.GC_SA_SCHEDULER }}

jobs:
  deploy-scheduler:
    name: Deploy Cloud Scheduler Job
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Workload IdentityÈÄ£Êê∫„Å´ÂøÖË¶Å

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GC_SA_CICID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Deploy Cloud Scheduler Job
        run: |
          # Use Cloud Run URL from GitHub Secrets
          SERVICE_URL="${{ secrets.CLOUD_RUN_URL }}"

          # Validate URL format and prerequisites
          if [ -z "$SERVICE_URL" ] || [ -z "${{ env.SCHEDULER_SA_EMAIL }}" ]; then
            echo "‚ùå Missing required environment variables"
            exit 1
          fi

          # Security: Validate URL format matches expected Cloud Run pattern
          if [[ ! "$SERVICE_URL" =~ ^https://urawa-support-hub-[a-z0-9]+-asia-northeast1\.run\.app$ ]]; then
            echo "‚ùå Invalid service URL format: $SERVICE_URL"
            echo "Expected: https://urawa-support-hub-*-asia-northeast1.run.app"
            exit 1
          fi

          echo "‚úÖ Service URL validated: $SERVICE_URL"

          # Deploy scheduler job
          if gcloud scheduler jobs describe "daily-ticket-collection" \
            --location="asia-northeast1" >/dev/null 2>&1; then
            gcloud scheduler jobs update http "daily-ticket-collection" \
              --location="asia-northeast1" \
              --schedule="0 20 * * *" \
              --time-zone="Asia/Tokyo" \
              --uri="${SERVICE_URL}/api/collect-tickets" \
              --http-method=POST \
              --headers="Content-Type=application/json" \
              --message-body='{"source":"cloud-scheduler"}' \
              --attempt-deadline="300s" \
              --max-retry-attempts=3 \
              --min-backoff=30s \
              --max-backoff=300s \
              --oidc-service-account-email="${{ env.SCHEDULER_SA_EMAIL }}" >/dev/null 2>&1
          else
            gcloud scheduler jobs create http "daily-ticket-collection" \
              --location="asia-northeast1" \
              --schedule="0 20 * * *" \
              --time-zone="Asia/Tokyo" \
              --uri="${SERVICE_URL}/api/collect-tickets" \
              --http-method=POST \
              --headers="Content-Type=application/json" \
              --message-body='{"source":"cloud-scheduler"}' \
              --attempt-deadline="300s" \
              --max-retry-attempts=3 \
              --min-backoff=30s \
              --max-backoff=300s \
              --oidc-service-account-email="${{ env.SCHEDULER_SA_EMAIL }}" \
              --oidc-token-audience="${SERVICE_URL}" >/dev/null 2>&1
          fi

          # Verify deployment success
          if gcloud scheduler jobs describe "daily-ticket-collection" \
            --location="asia-northeast1" >/dev/null 2>&1; then
            echo "‚úÖ Scheduler job deployed successfully"

            # Display job configuration for verification
            gcloud scheduler jobs describe "daily-ticket-collection" \
              --location="asia-northeast1" \
              --format="value(name,schedule,timeZone,httpTarget.uri,state)"
          else
            echo "‚ùå Scheduler job deployment failed"
            exit 1
          fi

      - name: Verify Service Account Permissions
        run: |
          echo "üîç Verifying service account permissions..."

          # Check if service account exists and has minimal required permissions
          SA_EXISTS=$(gcloud iam service-accounts describe "${{ env.SCHEDULER_SA_EMAIL }}" \
            --format="value(email)" 2>/dev/null || echo "")

          if [ -z "$SA_EXISTS" ]; then
            echo "‚ùå Service account not found: ${{ env.SCHEDULER_SA_EMAIL }}"
            exit 1
          fi

          echo "‚úÖ Service account verified: $SA_EXISTS"

          # Verify Cloud Run invoker role (critical for scheduler functionality)
          INVOKER_BINDING=$(gcloud run services get-iam-policy "urawa-support-hub" \
            --region="asia-northeast1" \
            --format="value(bindings[].members[])" \
            --filter="bindings.role:roles/run.invoker" 2>/dev/null | \
            grep "${{ env.SCHEDULER_SA_EMAIL }}" || echo "")

          if [ -z "$INVOKER_BINDING" ]; then
            echo "‚ö†Ô∏è  Warning: Service account may lack run.invoker permission"
          else
            echo "‚úÖ Service account has required run.invoker permission"
          fi
